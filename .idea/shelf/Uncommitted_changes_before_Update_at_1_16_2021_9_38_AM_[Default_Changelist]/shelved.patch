Index: app/src/main/java/com/dmobileapps/dat/app_note/database/NoteDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dmobileapps.dat.app_note.database\r\n\r\nimport android.content.Context\r\nimport androidx.room.Database\r\nimport androidx.room.Room\r\nimport androidx.room.RoomDatabase\r\nimport androidx.room.TypeConverters\r\nimport androidx.room.migration.Migration\r\nimport androidx.sqlite.db.SupportSQLiteDatabase\r\nimport com.dmobileapps.dat.app_note.database.dao.FolderDao\r\nimport com.dmobileapps.dat.app_note.database.dao.NoteDao\r\nimport com.dmobileapps.dat.app_note.model.Folder\r\nimport com.dmobileapps.dat.app_note.model.Note\r\n\r\n@Database(entities = [Folder::class, Note::class], version = 9)\r\n@TypeConverters(Converters::class)\r\nabstract class NoteDatabase : RoomDatabase() {\r\n    abstract fun getFolderDao(): FolderDao\r\n    abstract fun getNoteDao(): NoteDao\r\n\r\n    companion object {\r\n        @Volatile\r\n        private var instance: NoteDatabase? = null\r\n\r\n\r\n        private val MIGRATION = object : Migration(1, 2) {\r\n            override fun migrate(database: SupportSQLiteDatabase) {\r\n                database.apply {\r\n                    execSQL(\"ALTER TABLE widgets ADD COLUMN avatar String DEFAULT ''\")\r\n                    execSQL(\"ALTER TABLE widgets ADD COLUMN checkList String DEFAULT ''\")\r\n                }\r\n            }\r\n        }\r\n        fun getInstance(context: Context): NoteDatabase {\r\n            if (instance == null) {\r\n                instance =  Room.databaseBuilder(context, NoteDatabase::class.java, \"NoteDatabase6\")\r\n                        .addMigrations(MIGRATION)\r\n                        .build()\r\n            }\r\n            return instance!!\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/dmobileapps/dat/app_note/database/NoteDatabase.kt	(revision 8913d6a9e49351b99e163be2ec7b1fc93616270d)
+++ app/src/main/java/com/dmobileapps/dat/app_note/database/NoteDatabase.kt	(date 1610764252518)
@@ -26,8 +26,8 @@
         private val MIGRATION = object : Migration(1, 2) {
             override fun migrate(database: SupportSQLiteDatabase) {
                 database.apply {
-                    execSQL("ALTER TABLE widgets ADD COLUMN avatar String DEFAULT ''")
-                    execSQL("ALTER TABLE widgets ADD COLUMN checkList String DEFAULT ''")
+                    execSQL("ALTER TABLE note_table ADD COLUMN avatar String DEFAULT ''")
+                    execSQL("ALTER TABLE note_table ADD COLUMN checkList String DEFAULT ''")
                 }
             }
         }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_31_2020_8_31_AM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_12_31_2020_8_31_AM__Default_Changelist_.xml	(revision 8913d6a9e49351b99e163be2ec7b1fc93616270d)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_12_31_2020_8_31_AM__Default_Changelist_.xml	(revision 8913d6a9e49351b99e163be2ec7b1fc93616270d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_31_2020_8_31_AM_[Default_Changelist]" date="1609378289282" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_12_31_2020_8_31_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12/31/2020 8:31 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_12_31_2020_8_31_AM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_12_31_2020_8_31_AM_[Default_Changelist]/shelved.patch	(revision 8913d6a9e49351b99e163be2ec7b1fc93616270d)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_12_31_2020_8_31_AM_[Default_Changelist]/shelved.patch	(revision 8913d6a9e49351b99e163be2ec7b1fc93616270d)
@@ -1,125 +0,0 @@
-Index: app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/WriteNoteFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.dmobileapps.dat.app_note.ui.fragment\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.bumptech.glide.Glide\r\nimport com.dmobileapps.dat.app_note.R\r\nimport com.dmobileapps.dat.app_note.model.Note\r\nimport com.dmobileapps.dat.app_note.utils.Common\r\nimport com.dmobileapps.dat.app_note.utils.setPreventDoubleClick\r\nimport com.dmobileapps.dat.app_note.viewmodel.FolderViewmodel\r\nimport com.dmobileapps.dat.app_note.viewmodel.NoteViewmodel\r\nimport kotlinx.android.synthetic.main.fragment_write_note.*\r\nimport kotlinx.android.synthetic.main.fragment_write_note.ivBack\r\nimport kotlinx.android.synthetic.main.fragment_write_note.tvFolder\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass WriteNoteFragment : BaseFragment(R.layout.fragment_write_note) {\r\n    override fun onFragmentBackPressed() {\r\n        edContent.clearFocus()\r\n\r\n        if(Common.checkMain){\r\n            Common.checkMain = false\r\n            findNavController().popBackStack()\r\n        }else{\r\n            findNavController().popBackStack(R.id.listNoteFragment,false)\r\n        }\r\n\r\n    }\r\n    var idFolder = 0\r\n     lateinit var  note:Note\r\n    private val noteViewmodel: NoteViewmodel by lazy {\r\n        ViewModelProvider(this, NoteViewmodel.NoteViewmodelFactory(requireActivity().application))[NoteViewmodel::class.java]\r\n    }\r\n\r\n    private val folderViewmodel: FolderViewmodel by lazy {\r\n        ViewModelProvider(this, FolderViewmodel.NoteViewmodelFactory(requireActivity().application))[FolderViewmodel::class.java]\r\n    }\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        if(Common.checkInterface){\r\n            layoutWrite.setBackgroundColor(ContextCompat.getColor(requireContext(),R.color.colorBlack))\r\n            edContent.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorWhite))\r\n        }else{\r\n            edContent.setTextColor(ContextCompat.getColor(requireActivity(),R.color.colorBlack))\r\n            Glide.with(requireActivity()).load(R.drawable.background_write).into(ivBackground)\r\n        }\r\n\r\n\r\n        try {\r\n            idFolder = requireArguments().getInt(\"id\")\r\n            note = requireArguments().getParcelable<Note>(\"note\")!!\r\n            edContent.setText( note.content.toString())\r\n\r\n        }catch (e:Exception){\r\n\r\n        }\r\n\r\n\r\n        tvDone.setPreventDoubleClick(300){\r\n            if(edContent.text.toString().isNotEmpty()){\r\n                if(Common.checkScreen){\r\n                    Log.d(\"dat123\",\"zxc\")\r\n                    val currentDate: String =\r\n                        SimpleDateFormat(\"dd-MM-yyyy\", Locale.getDefault()).format(Date())\r\n                    note.date = currentDate\r\n                    note.content = edContent.text.toString()\r\n                    noteViewmodel.updateNote(note)\r\n\r\n                }else{\r\n                    val currentDate: String =\r\n                        SimpleDateFormat(\"dd-MM-yyyy\", Locale.getDefault()).format(Date())\r\n\r\n                    val note = Note(edContent.text.toString(),currentDate,idFolder)\r\n                    noteViewmodel.insertNote(note)\r\n                    noteViewmodel.getAllNote(idFolder).observe(requireActivity(), androidx.lifecycle.Observer {\r\n                        folderViewmodel.updateFolderById(idFolder,it.size)\r\n                    })\r\n                }\r\n\r\n                onFragmentBackPressed()\r\n\r\n\r\n            }\r\n        }\r\n        ivBack.setPreventDoubleClick(300){\r\n            onFragmentBackPressed()\r\n        }\r\n\r\n        tvFolder.setPreventDoubleClick(300){\r\n            onFragmentBackPressed()\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/WriteNoteFragment.kt	(revision e7d91b3ebbba9268f94d39fa4bfb7fe591251a94)
-+++ app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/WriteNoteFragment.kt	(date 1609377647388)
-@@ -83,10 +83,7 @@
-                         folderViewmodel.updateFolderById(idFolder,it.size)
-                     })
-                 }
--
-                 onFragmentBackPressed()
--
--
-             }
-         }
-         ivBack.setPreventDoubleClick(300){
-Index: app/src/main/java/com/dmobileapps/dat/app_note/utils/ImageUtil.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.dmobileapps.dat.app_note.utils\r\n\r\nimport android.content.Context\r\nimport android.content.ContextWrapper\r\nimport android.content.res.Resources\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport android.widget.ImageView\r\nimport com.bumptech.glide.Glide\r\nimport com.dmobileapps.dat.app_note.R\r\nimport com.dmobileapps.dat.app_note.model.ImageObj\r\nimport java.io.*\r\nimport java.nio.channels.FileChannel\r\n\r\n\r\nobject ImageUtil {\r\n\r\n    fun setImage(image: ImageView, drawable_image: Int) {\r\n        Glide.with(image.context).load(drawable_image).into(image)\r\n    }\r\n\r\n    fun setImage(image: ImageView, url_image: String?) {\r\n        Glide.with(image.context).load(url_image).placeholder(R.mipmap.ic_launcher4)\r\n            .error(R.mipmap.ic_launcher4).into(image)\r\n    }\r\n\r\n    fun setImage(image: ImageView, url_image: Uri?) {\r\n        Glide.with(image.context).load(url_image).placeholder(R.mipmap.ic_launcher4)\r\n            .error(R.mipmap.ic_launcher4).into(image)\r\n    }\r\n\r\n    fun setImage(image: ImageView, url_image: Bitmap?) {\r\n        Glide.with(image.context).load(url_image).placeholder(R.mipmap.ic_launcher4)\r\n            .error(R.mipmap.ic_launcher4).into(image)\r\n    }\r\n\r\n    fun setImageByte(image: ImageView, url_image: ByteArray?) {\r\n        Glide.with(image.context).load(url_image).placeholder(R.mipmap.ic_launcher4)\r\n            .error(R.mipmap.ic_launcher4).load(url_image).into(image)\r\n    }\r\n\r\n    fun convertBitmapFromDrawable(res: Resources?, resId: Int): Bitmap {\r\n        return BitmapFactory.decodeResource(res, resId)\r\n    }\r\n\r\n    fun imageToBitmap(res: Resources?, resId: Int): ByteArray {\r\n        val bitmap = convertBitmapFromDrawable(res, resId)\r\n        val stream = ByteArrayOutputStream()\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, 90, stream)\r\n\r\n        return stream.toByteArray()\r\n    }\r\n\r\n    fun convertBitmaptoFile(\r\n        context: Context,\r\n        bitmap: Bitmap,\r\n        filename: String?\r\n    ): File { //create a file to write bitmap data\r\n        val f = File(context.cacheDir, filename)\r\n        //Convert bitmap to byte array\r\n        val bos = ByteArrayOutputStream()\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 0 /*ignored for PNG*/, bos)\r\n        val bitmapdata = bos.toByteArray()\r\n\r\n//write the bytes in file\r\n        var fos: FileOutputStream? = null\r\n        try {\r\n            fos = FileOutputStream(f)\r\n        } catch (e: FileNotFoundException) {\r\n            e.printStackTrace()\r\n        }\r\n        try {\r\n            fos!!.write(bitmapdata)\r\n            fos.flush()\r\n            fos.close()\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n        return f\r\n    }\r\n\r\n    fun saveToInternalStorage(applicationContext: Context, image: ImageObj): String? {\r\n        // path to /data/data/yourapp/app_data/imageDir\r\n        val directory = getInternalPackage(applicationContext)\r\n\r\n        // Create imageDir\r\n        val mypath = File(directory, \"${image.id}.png\")\r\n        var fos: FileOutputStream? = null\r\n        try {\r\n            fos = FileOutputStream(mypath)\r\n            // Use the compress method on the BitMap object to write image to the OutputStream\r\n            image.bitmap!!.compress(Bitmap.CompressFormat.PNG, 100, fos)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        } finally {\r\n            try {\r\n                fos!!.close()\r\n            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        return directory!!.absolutePath\r\n    }\r\n\r\n    private fun getInternalPackage(applicationContext: Context): File? {\r\n        val cw = ContextWrapper(applicationContext)\r\n        return cw.getDir(\"imageDir\", Context.MODE_PRIVATE)\r\n    }\r\n\r\n    fun loadImageFromStorage(path: String): Bitmap? {\r\n        try {\r\n            val f = File(path)\r\n            val b = BitmapFactory.decodeStream(FileInputStream(f))\r\n            return b\r\n        } catch (e: FileNotFoundException) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n    }\r\n\r\n    fun deleteFileFromInternalStorage(imagePath: String): Boolean {\r\n//        val dir = context.filesDir\r\n        val file = File(imagePath)\r\n        return file.delete()\r\n    }\r\n\r\n    fun copyFile(context: Context, inputPath: String, id: String): String? {\r\n        val directory = getInternalPackage(context)\r\n        val src = File(inputPath)\r\n        val mypath = File(directory, \"${id}.png\")\r\n        val inChannel: FileChannel? = FileInputStream(src).channel\r\n        val outChannel: FileChannel? = FileOutputStream(mypath).channel\r\n        try {\r\n            inChannel!!.transferTo(0, inChannel.size(), outChannel)\r\n        } catch (e: java.lang.Exception) {\r\n            Log.e(\"TAG\", \"copyFile error: \", e)\r\n        } finally {\r\n            if (inChannel != null) inChannel.close()\r\n            if (outChannel != null) outChannel.close()\r\n        }\r\n        return directory!!.absolutePath\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/dmobileapps/dat/app_note/utils/ImageUtil.kt	(revision e7d91b3ebbba9268f94d39fa4bfb7fe591251a94)
-+++ app/src/main/java/com/dmobileapps/dat/app_note/utils/ImageUtil.kt	(date 1609315920646)
-@@ -126,7 +126,7 @@
-         return file.delete()
-     }
- 
--    fun copyFile(context: Context, inputPath: String, id: String): String? {
-+    fun copyFileToInternal(context: Context, inputPath: String, id: String): String? {
-         val directory = getInternalPackage(context)
-         val src = File(inputPath)
-         val mypath = File(directory, "${id}.png")
-@@ -137,8 +137,8 @@
-         } catch (e: java.lang.Exception) {
-             Log.e("TAG", "copyFile error: ", e)
-         } finally {
--            if (inChannel != null) inChannel.close()
--            if (outChannel != null) outChannel.close()
-+            inChannel?.close()
-+            outChannel?.close()
-         }
-         return directory!!.absolutePath
-     }
-Index: app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/checkList/CheckListFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.dmobileapps.dat.app_note.ui.fragment.checkList\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.dmobileapps.dat.app_note.R\r\nimport com.dmobileapps.dat.app_note.model.CheckList\r\nimport com.dmobileapps.dat.app_note.model.RecordObj\r\nimport com.dmobileapps.dat.app_note.ui.adapter.CheckListAdapter\r\nimport com.dmobileapps.dat.app_note.ui.fragment.BaseFragment\r\nimport com.dmobileapps.dat.app_note.ui.fragment.chooseImage.ChooseImageAct\r\nimport com.dmobileapps.dat.app_note.utils.DeviceUtil\r\nimport com.dmobileapps.dat.app_note.utils.setPreventDoubleClick\r\nimport com.google.android.exoplayer2.*\r\nimport com.google.android.exoplayer2.audio.AudioAttributes\r\nimport com.google.android.exoplayer2.source.DefaultMediaSourceFactory\r\nimport com.google.android.exoplayer2.source.MediaSourceFactory\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\nimport kotlinx.android.synthetic.main.fragment_check_list.*\r\nimport nv.module.audiorecoder.ui.AudioActivity\r\nimport java.io.File\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\nclass CheckListFragment : BaseFragment(R.layout.fragment_check_list),\r\n    BottomNavigationView.OnNavigationItemSelectedListener {\r\n    private val arrCheckList: ArrayList<CheckList> = ArrayList()\r\n    private lateinit var adapterCheckList: CheckListAdapter\r\n    private var IS_CHOOSE = 0\r\n    private var POSITION_FOCUS = 0\r\n    private var isOnClick = false\r\n    private var isPause = false\r\n\r\n    private lateinit var player: SimpleExoPlayer\r\n    private var positionCheckListPlay = 0\r\n    private var positionRecordPlay = 0\r\n\r\n\r\n    override fun onFragmentBackPressed() {\r\n        findNavController().popBackStack()\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        ivBack.setPreventDoubleClick(300) {\r\n            onFragmentBackPressed()\r\n        }\r\n        val currentDate: String = SimpleDateFormat(\"dd-MM-yyyy\", Locale.getDefault()).format(Date())\r\n        tvTime.text = currentDate\r\n        initRcv()\r\n        initializePlayer(requireContext())\r\n        bottom_nav.setOnNavigationItemSelectedListener(this)\r\n    }\r\n\r\n    private fun initRcv() {\r\n        adapterCheckList = CheckListAdapter(arrCheckList, { position, text ->\r\n            //onFocusText\r\n            POSITION_FOCUS = position\r\n        },\r\n            {\r\n                // Click Image\r\n            },\r\n            { positionItem, oldPositionPlay, positionPlay ->\r\n                // Click record\r\n                Log.e(\"TAG\", \"initRcv: \")\r\n                positionCheckListPlay = positionItem\r\n                positionRecordPlay = positionPlay\r\n                if (arrCheckList[positionItem].audios[positionPlay].isPlay) {\r\n                    stopSound()\r\n                } else {\r\n                    adapterCheckList.adapterRecord.currentPlay = 0\r\n                    arrCheckList[positionItem].audios[oldPositionPlay].isPlay = false\r\n                    arrCheckList[positionItem].audios[positionPlay].isPlay = true\r\n                    playRecord(positionItem, oldPositionPlay, positionPlay)\r\n                }\r\n                adapterCheckList.adapterRecord.notifyItemChanged(oldPositionPlay)\r\n                adapterCheckList.adapterRecord.notifyItemChanged(positionPlay)\r\n            },\r\n            {\r\n                // delete item\r\n                arrCheckList.removeAt(it)\r\n                adapterCheckList.notifyDataSetChanged()\r\n            },\r\n            { positionCheckList, positionImage ->\r\n                // onDeleteImage\r\n                arrCheckList[positionCheckList].images.removeAt(positionImage)\r\n                adapterCheckList.notifyItemChanged(positionCheckList)\r\n            },\r\n            { positionCheckList, positionRecord ->\r\n                // onDeleteRecord\r\n                arrCheckList[positionCheckList].audios.removeAt(positionRecord)\r\n                adapterCheckList.notifyItemChanged(positionCheckList)\r\n\r\n            })\r\n        rcvCheckList.layoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)\r\n        rcvCheckList.adapter = adapterCheckList\r\n\r\n    }\r\n\r\n    private fun playRecord(\r\n        positionItem: Int,\r\n        oldPositionPlay: Int,\r\n        positionPlay: Int\r\n    ) {\r\n        val url = arrCheckList[positionItem].audios[positionPlay].path\r\n        if (!File(url).exists()) {\r\n            Toast.makeText(context, \"File doesn't exists\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n        player.setMediaItem(MediaItem.fromUri(url))\r\n        player.prepare()\r\n    }\r\n\r\n\r\n    private val handler = Handler()\r\n    private var runnable: Runnable = object : Runnable {\r\n        override fun run() {\r\n            adapterCheckList.adapterRecord.currentPlay =\r\n                player.currentPosition.toFloat().div(player.duration.toFloat()).times(100f).toInt()\r\n\r\n            adapterCheckList.adapterRecord.notifyItemChanged(positionRecordPlay)\r\n            handler.postDelayed(this, 200)\r\n        }\r\n    }\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if (isOnClick) {\r\n            if (IS_CHOOSE == 1) {\r\n                Log.e(\"TAG\", \"onResume: ${DeviceUtil.arrImage} \")\r\n                if (DeviceUtil.arrImage.isNotEmpty()) {\r\n                    if (arrCheckList.isEmpty()) {\r\n                        addItemCheckList()\r\n                    }\r\n                    arrCheckList[POSITION_FOCUS].images.addAll(DeviceUtil.arrImage)\r\n                    adapterCheckList.notifyItemChanged(POSITION_FOCUS)\r\n                }\r\n            } else if (IS_CHOOSE == 2) {\r\n                if (arrCheckList.isEmpty()) {\r\n                    addItemCheckList()\r\n                }\r\n            }\r\n            isOnClick = false\r\n        }\r\n        if (isPause) {\r\n            resumeSound()\r\n        }\r\n    }\r\n\r\n    override fun onNavigationItemSelected(menu: MenuItem): Boolean {\r\n        when (menu.itemId) {\r\n            R.id.menu_add -> {\r\n                addItemCheckList()\r\n            }\r\n            R.id.menu_image -> {\r\n                IS_CHOOSE = 1\r\n                startActivity(Intent(requireContext(), ChooseImageAct::class.java))\r\n                isOnClick = true\r\n            }\r\n            R.id.menu_draw -> {\r\n                startActivity(Intent(requireActivity(), DrawAct::class.java))\r\n                IS_CHOOSE = 1\r\n                isOnClick = true\r\n            }\r\n\r\n            R.id.menu_recording -> {\r\n\r\n                val intent = Intent(context, AudioActivity::class.java)\r\n                startActivityForResult(intent, AudioActivity.REQUEST_AUDIO)\r\n// AudioActivity.startActivity(requireActivity())\r\n                IS_CHOOSE = 3\r\n                isOnClick = true\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    private fun addItemCheckList() {\r\n        var idCheckList = 0\r\n        if (arrCheckList.size > 0) {\r\n            idCheckList = arrCheckList.size + 1\r\n        }\r\n        arrCheckList.add(CheckList(idCheckList))\r\n        adapterCheckList.notifyDataSetChanged()\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        isPause = true\r\n        pauseSound()\r\n    }\r\n\r\n    private fun pauseSound() {\r\n        if (player.isPlaying) {\r\n            player.pause()\r\n        }\r\n    }\r\n\r\n\r\n    private fun resumeSound() {\r\n        if (isPause) {\r\n            player.play()\r\n            isPause = false\r\n        }\r\n    }\r\n\r\n    private fun stopSound() {\r\n        player.stop()\r\n        adapterCheckList.adapterRecord.currentPlay = 0\r\n        arrCheckList[positionCheckListPlay].audios[positionRecordPlay].isPlay = false\r\n        adapterCheckList.adapterRecord.notifyItemChanged(positionRecordPlay)\r\n        handler.removeCallbacks(runnable)\r\n    }\r\n\r\n    private fun initializePlayer(context: Context) {\r\n        val renderersFactory: RenderersFactory =\r\n            DefaultRenderersFactory(context.applicationContext)\r\n                .setExtensionRendererMode(DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF)\r\n        val mediaSourceFactory: MediaSourceFactory = DefaultMediaSourceFactory(context)\r\n        player = SimpleExoPlayer.Builder(context, renderersFactory)\r\n            .setMediaSourceFactory(mediaSourceFactory)\r\n            .build()\r\n        player.addListener(object : Player.EventListener {\r\n\r\n            override fun onPlayerError(error: ExoPlaybackException) {\r\n                arrCheckList[positionCheckListPlay].audios[positionRecordPlay].isPlay = false\r\n                adapterCheckList.adapterRecord.notifyItemChanged(positionRecordPlay)\r\n            }\r\n\r\n            override fun onPlayerStateChanged(playWhenReady: Boolean, playbackState: Int) {\r\n                if (playbackState == ExoPlayer.STATE_ENDED) {\r\n                    stopSound()\r\n                } else if (playbackState == ExoPlayer.STATE_READY && playWhenReady) {\r\n                    runnable.run()\r\n                }\r\n            }\r\n        })\r\n        player.setAudioAttributes(AudioAttributes.DEFAULT, true)\r\n        player.playWhenReady = true\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == AudioActivity.REQUEST_AUDIO && resultCode == AppCompatActivity.RESULT_OK) {\r\n            val requiredValue = data!!.getStringExtra(AudioActivity.KEY_PATH_AUDIO)\r\n            if (arrCheckList.isEmpty()) {\r\n                addItemCheckList()\r\n            }\r\n            if (!requiredValue.isNullOrBlank()) {\r\n                arrCheckList[POSITION_FOCUS].audios.add(\r\n                    RecordObj(\r\n                        \"record${System.currentTimeMillis() / 1000}\",\r\n                        requiredValue,\r\n                        false\r\n                    )\r\n                )\r\n                adapterCheckList.notifyItemChanged(POSITION_FOCUS)\r\n            }\r\n        }\r\n\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/checkList/CheckListFragment.kt	(revision e7d91b3ebbba9268f94d39fa4bfb7fe591251a94)
-+++ app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/checkList/CheckListFragment.kt	(date 1609312200017)
-@@ -20,6 +20,7 @@
- import com.dmobileapps.dat.app_note.ui.fragment.chooseImage.ChooseImageAct
- import com.dmobileapps.dat.app_note.utils.DeviceUtil
- import com.dmobileapps.dat.app_note.utils.setPreventDoubleClick
-+import com.dmobileapps.dat.app_note.utils.setPreventDoubleClickScaleView
- import com.google.android.exoplayer2.*
- import com.google.android.exoplayer2.audio.AudioAttributes
- import com.google.android.exoplayer2.source.DefaultMediaSourceFactory
-@@ -60,6 +61,9 @@
-         initRcv()
-         initializePlayer(requireContext())
-         bottom_nav.setOnNavigationItemSelectedListener(this)
-+        btnSave.setPreventDoubleClickScaleView(200) {
-+
-+        }
-     }
- 
-     private fun initRcv() {
-@@ -81,7 +85,7 @@
-                     adapterCheckList.adapterRecord.currentPlay = 0
-                     arrCheckList[positionItem].audios[oldPositionPlay].isPlay = false
-                     arrCheckList[positionItem].audios[positionPlay].isPlay = true
--                    playRecord(positionItem, oldPositionPlay, positionPlay)
-+                    playRecord(positionItem,  positionPlay)
-                 }
-                 adapterCheckList.adapterRecord.notifyItemChanged(oldPositionPlay)
-                 adapterCheckList.adapterRecord.notifyItemChanged(positionPlay)
-@@ -109,7 +113,6 @@
- 
-     private fun playRecord(
-         positionItem: Int,
--        oldPositionPlay: Int,
-         positionPlay: Int
-     ) {
-         val url = arrCheckList[positionItem].audios[positionPlay].path
-Index: app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/chooseImage/ChooseImageAct.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.dmobileapps.dat.app_note.ui.fragment.chooseImage\r\n\r\nimport android.Manifest\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.dmobileapps.dat.app_note.R\r\nimport com.dmobileapps.dat.app_note.model.ImageObj\r\nimport com.dmobileapps.dat.app_note.ui.fragment.chooseImage.adapter.AdapterImage\r\nimport com.dmobileapps.dat.app_note.utils.AppUtil\r\nimport com.dmobileapps.dat.app_note.utils.DeviceUtil\r\nimport com.dmobileapps.dat.app_note.utils.setPreventDoubleClick\r\nimport kotlinx.android.synthetic.main.fragment_select_image.*\r\nimport kotlinx.android.synthetic.main.toolbar_choose_image.*\r\n\r\nclass ChooseImageAct : AppCompatActivity() {\r\n\r\n    private val STORAGE_REQUEST = 100\r\n    private var arrImageObj: ArrayList<ImageObj> = ArrayList()\r\n    private var arrImageSelected: ArrayList<ImageObj> = ArrayList()\r\n    private lateinit var adapterImage: AdapterImage\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.fragment_select_image)\r\n        tbBack.setPreventDoubleClick(300) {\r\n            DeviceUtil.arrImage.clear()\r\n            finish()\r\n        }\r\n        btnDone.setPreventDoubleClick(300) {\r\n            if (arrImageSelected.isNotEmpty()) {\r\n                DeviceUtil.arrImage.clear()\r\n                    DeviceUtil.arrImage.addAll(arrImageSelected)\r\n                finish()\r\n            } else {\r\n                AppUtil.showToast(this, R.string.please_choose_image)\r\n            }\r\n        }\r\n        setRcvImage()\r\n        requestStoragePermission()\r\n\r\n    }\r\n    private fun requestStoragePermission() {\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.WRITE_EXTERNAL_STORAGE\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                requestPermissions(\r\n                    arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),\r\n                    STORAGE_REQUEST\r\n                )\r\n            }\r\n        } else {\r\n\r\n            getAllImage()\r\n\r\n        }\r\n    }\r\n\r\n    private fun setRcvImage() {\r\n        adapterImage = AdapterImage(arrImageObj) {\r\n            val video = arrImageObj[it]\r\n            if (video.isSelected) {\r\n                arrImageSelected.remove(video)\r\n\r\n                arrImageObj[it].isSelected = !arrImageObj[it].isSelected\r\n                adapterImage.notifyItemChanged(it)\r\n            } else {\r\n                if (arrImageSelected.size < 5) {\r\n                    arrImageSelected.add(video)\r\n                    arrImageObj[it].isSelected = !arrImageObj[it].isSelected\r\n                    adapterImage.notifyItemChanged(it)\r\n                } else {\r\n                    AppUtil.showToast(this, R.string.max_video_selected)\r\n                }\r\n\r\n            }\r\n        }\r\n        rcvImage.layoutManager = GridLayoutManager(this, 3, RecyclerView.VERTICAL, false)\r\n        rcvImage.adapter = adapterImage\r\n    }\r\n\r\n    private fun getAllImage() {\r\n        arrImageObj.clear()\r\n        if (DeviceUtil.getAllImage(this) != null) {\r\n            arrImageObj.addAll(DeviceUtil.getAllImage(this)!!)\r\n        }\r\n        adapterImage.notifyDataSetChanged()\r\n    }\r\n\r\n    //\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<String?>,\r\n        grantResults: IntArray\r\n    ) {\r\n\r\n        when (requestCode) {\r\n            STORAGE_REQUEST -> {\r\n                if (grantResults.isNotEmpty()\r\n                    && grantResults[0] == PackageManager.PERMISSION_GRANTED\r\n                ) {\r\n                    getAllImage()\r\n                } else {\r\n                    Toast.makeText(\r\n                        this,\r\n                        \"You must grant a write storage permission to use this functionality\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/chooseImage/ChooseImageAct.kt	(revision e7d91b3ebbba9268f94d39fa4bfb7fe591251a94)
-+++ app/src/main/java/com/dmobileapps/dat/app_note/ui/fragment/chooseImage/ChooseImageAct.kt	(date 1609312200010)
-@@ -1,3 +1,4 @@
-+
- package com.dmobileapps.dat.app_note.ui.fragment.chooseImage
- 
- import android.Manifest
-Index: app/src/main/res/navigation/nav_graph.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/nav_graph\"\r\n    app:startDestination=\"@id/checkListFragment\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/splashFragment\"\r\n        android:name=\"com.dmobileapps.dat.app_note.ui.fragment.SplashFragment\"\r\n        android:label=\"fragment_splash\"\r\n        tools:layout=\"@layout/fragment_splash\" >\r\n        <action\r\n\r\n            android:id=\"@+id/action_splashFragment_to_mainFragment\"\r\n            app:destination=\"@id/mainFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/mainFragment\"\r\n        android:name=\"com.dmobileapps.dat.app_note.ui.fragment.MainFragment\"\r\n        android:label=\"fragment_main\"\r\n        tools:layout=\"@layout/fragment_main\" >\r\n        <action\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"\r\n            android:id=\"@+id/action_mainFragment_to_settingFragment\"\r\n            app:destination=\"@id/settingFragment\" />\r\n        <action\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"\r\n            android:id=\"@+id/action_mainFragment_to_listNoteFragment\"\r\n            app:destination=\"@id/listNoteFragment\" />\r\n        <action\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"\r\n            android:id=\"@+id/action_mainFragment_to_writeNoteFragment\"\r\n            app:destination=\"@id/writeNoteFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_mainFragment_to_checkListFragment\"\r\n            app:destination=\"@id/checkListFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/settingFragment\"\r\n        android:name=\"com.dmobileapps.dat.app_note.ui.fragment.SettingFragment\"\r\n        android:label=\"fragment_setting\"\r\n        tools:layout=\"@layout/fragment_setting\" >\r\n        <action\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"\r\n            android:id=\"@+id/action_settingFragment_to_policyFragment\"\r\n            app:destination=\"@id/policyFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/listNoteFragment\"\r\n        android:name=\"com.dmobileapps.dat.app_note.ui.fragment.ListNoteFragment\"\r\n        android:label=\"fragment_list_note\"\r\n        tools:layout=\"@layout/fragment_list_note\" >\r\n        <action\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"\r\n            android:id=\"@+id/action_listNoteFragment_to_writeNoteFragment\"\r\n            app:destination=\"@id/writeNoteFragment\" />\r\n        <action\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"\r\n            android:id=\"@+id/action_listNoteFragment_to_passCodeFragment\"\r\n            app:destination=\"@id/passCodeFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/writeNoteFragment\"\r\n        android:name=\"com.dmobileapps.dat.app_note.ui.fragment.WriteNoteFragment\"\r\n        android:label=\"fragment_write_note\"\r\n        tools:layout=\"@layout/fragment_write_note\" />\r\n    <fragment\r\n        android:id=\"@+id/passCodeFragment\"\r\n        android:name=\"com.dmobileapps.dat.app_note.ui.fragment.PassCodeFragment\"\r\n        android:label=\"fragment_pass_code\"\r\n        tools:layout=\"@layout/fragment_pass_code\" >\r\n        <action\r\n            app:enterAnim=\"@anim/from_right\"\r\n            app:exitAnim=\"@anim/to_left\"\r\n            app:popEnterAnim=\"@anim/from_left\"\r\n            app:popExitAnim=\"@anim/to_right\"\r\n            android:id=\"@+id/action_passCodeFragment_to_writeNoteFragment\"\r\n            app:destination=\"@id/writeNoteFragment\" />\r\n    </fragment>\r\n    <fragment\r\n        android:id=\"@+id/policyFragment\"\r\n        android:name=\"com.dmobileapps.dat.app_note.ui.fragment.PolicyFragment\"\r\n        android:label=\"fragment_policy\"\r\n        tools:layout=\"@layout/fragment_policy\" />\r\n    <fragment\r\n        android:id=\"@+id/checkListFragment\"\r\n        android:name=\"com.dmobileapps.dat.app_note.ui.fragment.checkList.CheckListFragment\"\r\n        android:label=\"CheckListFragment\" />\r\n</navigation>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/res/navigation/nav_graph.xml	(revision e7d91b3ebbba9268f94d39fa4bfb7fe591251a94)
-+++ app/src/main/res/navigation/nav_graph.xml	(date 1609292040196)
-@@ -3,7 +3,7 @@
-     xmlns:app="http://schemas.android.com/apk/res-auto"
-     xmlns:tools="http://schemas.android.com/tools"
-     android:id="@+id/nav_graph"
--    app:startDestination="@id/checkListFragment">
-+    app:startDestination="@id/mainFragment">
- 
-     <fragment
-         android:id="@+id/splashFragment"
